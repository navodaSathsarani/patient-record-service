name: CI/CD Pipeline for Patient Record Service

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set Up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
          node-version: '16' # Ensure the Node.js version matches your project

    # Step 3: Install Dependencies
    - name: Install Dependencies
      run: npm install

    # Step 4: Run Tests
    - name: Run Tests
      run: npm test

    # Step 5: Authenticate with Google Cloud
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Step 6: Set Up Google Cloud CLI
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
          project_id: healthsync-project-445302

    # Step 7: Authenticate Docker with GCR
    - name: Authenticate Docker
      run: gcloud auth configure-docker gcr.io

    # Step 8: Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        docker buildx build --platform linux/amd64 -t gcr.io/healthsync-project-445302/patient-record-service:latest .
        docker push gcr.io/healthsync-project-445302/patient-record-service:latest

    # Step 9: Set Up Kubernetes Credentials
    - name: Set up Kubernetes Credentials
      run: |
          gcloud container clusters get-credentials healthsync-cluster --zone us-east1 --project healthsync-project-445302

    # Step 10: Deploy New Version to Green
    - name: Deploy New Version to Green
      run: |
        sed -i "s|<IMAGE>|gcr.io/healthsync-project-445302/patient-record-service:latest|g" patient-record-service-green.yaml
        kubectl apply -f patient-record-service-green.yaml

    # Step 11: Test on Green
    - name: Validate Green Deployment
      run: |
        kubectl rollout status deployment/patient-record-service-green --timeout=120s

    # Step 12: Switch Traffic to Green
    - name: Switch Traffic to Green Deployment
      run: |
        kubectl patch service patient-record-service -p '{"spec":{"selector":{"app":"patient-record-service-green"}}}'

    # Step 13: Rename Current Green to Blue
    - name: Rename Current Green to Blue
      if: success()
      run: |
        kubectl scale deployment patient-record-service-green --replicas=0
        kubectl patch deployment patient-record-service-green -p '{"metadata":{"name":"patient-record-service-blue"}}}'
        kubectl scale deployment patient-record-service-blue --replicas=1

    # Step 14: Fallback to Blue (if Green Fails)
    - name: Rollback to Blue Deployment
      if: failure()
      run: |
        kubectl patch service patient-record-service -p '{"spec":{"selector":{"app":"patient-record-service-blue"}}}'
        kubectl scale deployment patient-record-service-blue --replicas=1

    # Step 15: Cleanup Blue Deployment After Success (Optional)
    - name: Cleanup Old Blue Deployment
      if: success()
      run: |
        kubectl delete deployment patient-record-service-blue
